(define-module (synnax services home gdb)
  #:use-module (guix gexp)
  #:use-module (guix packages)
  #:use-module (guix records)
  #:use-module (gnu packages gdb)
  #:use-module (gnu services)
  #:use-module (gnu services configuration)
  #:autoload   (gnu system shadow) (%default-gdbinit)
  #:use-module (gnu home services)
  #:use-module (ice-9 match)
  #:use-module (srfi srfi-1)
  #:export (home-gdb-configuration
            home-gdb-service-type))


(define-configuration home-gdb-configuration
  (package
   (package gdb)
   "GDB package to use.")
  (configs
   (text-config '())
   "List of file-like objects which will be added to @file{gdbinit}.
NOTE: Guix's provided @file{gdbinit} will always be included first, allowing GDB
to find pretty-printers from the store, among other features."))

(define (home-gdb-config-service config)
  "Return a list of Gdb configuration files placed in Gdb's expected
location."
  (define (filter-fields field)
    (filter-configuration-fields home-gdb-configuration-fields
                                 (list field)))

  (define (serialize-field field)
    (serialize-configuration
     config
     (filter-fields field)))

  (list
   `("gdb/gdbinit"
     ,(apply mixed-text-file
             "gdb-config"
             (append
              ;; Always include Guix's shipped %default-gdbinit, because it sets
              ;; GDB up to work with Guix's store.
              (list "# Generated by Guix Home. DO NOT EDIT!\n"
                    (plain-file-content %default-gdbinit) "\n")
              ;; serialize-text-config already does the map, returning a list of
              ;; strings at the end.
              (list (serialize-field 'configs)))))))

(define (home-gdb-profile-service config)
  "Return a list of <package>s to add to the user's profile."
  (list (home-gdb-configuration-package config)))

(define (home-gdb-extensions original-config extension-configs)
  "Extend ORIGINAL-CONFIG with the configuration in the list of
EXTENSION-CONFIGS."
  (match-record original-config <home-gdb-configuration>
   (configs)
   (home-gdb-configuration
    (inherit original-config)
    (configs
     (append configs
             (append-map home-gdb-configuration-configs extension-configs))))))

(define home-gdb-service-type
  (service-type (name 'home-gdb)
                (extensions
                 (list (service-extension
                        home-xdg-configuration-files-service-type
                        home-gdb-config-service)
                       (service-extension
                        home-profile-service-type
                        home-gdb-profile-service)))
                (compose concatenate)
                (extend home-gdb-extensions)
                (default-value (home-gdb-configuration))
                (description "Create a GDB configuration and provide GDB
for regular use.")))


;;;
;;; Generate documentation.
;;;
(define (generate-home-gdb-documentation)
  (generate-documentation `((home-gdb-configuration ,home-gdb-configuration-fields))
                          'home-gdb-configuration))
