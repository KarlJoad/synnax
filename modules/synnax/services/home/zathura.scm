(define-module (synnax services home zathura)
  #:use-module (guix gexp)
  #:use-module (guix packages)
  #:use-module (gnu packages pdf)
  #:use-module (gnu services)
  #:use-module (gnu services configuration)
  #:use-module (gnu home services)
  #:use-module (ice-9 match)
  #:use-module (srfi srfi-1)
  #:export (home-zathura-configuration
            home-zathura-service-type))

(define %default-zathura-config
  ;; Do the user-expected behavior and have copying from a PDF copy to the user's
  ;; clipboard for pasting elsewhere.
  '((selection-clipboard . "clipboard")))

(define %default-zathura-extra-config
  ;; Do not add any extra configuration.
  (list))

(define (serialize-alist field-name val)
  #~(string-append
     #$@(map
         (match-lambda
           ;; FIXME: Catch this case with useful error message
           ;; ((_) (error))
           ((key . #f) (format #f "set ~a false~%" key))
           ((key . #t) (format #f "set ~a true~%" key))
           ((key . val)
            (if (string? val)
                (format #f "set ~a ~s~%" key val)
                (format #f "set ~a ~a~%" key val))))
         val)))

(define %zathura-shortcut-functions
  '(abort adjust_window change_mode display_link focus_inputbar follow
    goto jumplist navigate navigate_index print quit recolor reload
    rotate scroll search set toggle_fullscreen toggle_index toggle_inputbar
    toggle_page_mode toggle_statusbar zoom))

(define %default-zathura-key-mapping
  ;; Do not override any defaults.
  (list))

(define key-map-alist? alist?)
(define (serialize-key-map-alist field-name val)
  #~(string-append
     #$@(map
         (match-lambda
           ;; FIXME: Catch empty alist entry with useful error message.
           ((kbd) (format #f "unmap ~a~%" kbd))
           ((kbd function) (format #f "map ~a ~a~%" kbd function))
           ((kbd function args) (format #f "map ~a ~a ~a~%" kbd function args)))
         val)))

(define (list-packages? lst)
  (every package? lst))

(define (serialize-list-packages field-name val) "")

(define %default-zathura-plugins
  (list zathura-ps
        zathura-pdf-mupdf))

(define-configuration home-zathura-configuration
  (package
   (package zathura)
   "Zathura package to use.")
  (plugins
   (list-packages %default-zathura-plugins)
   "List of Zathura plugin packages to also make available for Zathura.")
  (config
   (alist %default-zathura-config)
   "Alist of keys to values to set. NOTE: You must quote color codes as strings.")
  (key-mapping
   (key-map-alist %default-zathura-key-mapping)
   "Alist of keyboard keys to map to Zathura functions.
Control, Alt and Shift are allowed as modifiers, using @t{C-}, @t{A-}, and @{S-}
respectively. NOTE: If you use modifiers, @b{you} @emph{MUST} wrap the key sequence in @t{<}
and @t{>}. For example, @t{<C-a>}.")
  (extra-config
   (text-config %default-zathura-extra-config)
   "List of file-like objects which will be appended to generated configuration."))

(define (serialize-home-zathura-configuration config)
  #~(string-append
   "## Generated by Guix Home. DO NOT EDIT! ##\n"
   #$(serialize-configuration config home-zathura-configuration-fields)))

(define (create-config-file config config-store-name)
  (mixed-text-file config-store-name (serialize-home-zathura-configuration config)))

(define (home-zathura-config-service config)
  "Return a list of Zathura configuration files placed in Zathura's expected
location."
  (list
   `("zathura/zathurarc"
     ,(create-config-file config "zathura-config"))))

(define (home-zathura-profile-service config)
  "Return a list of <package>s to add to the user's profile."
  (cons
   (home-zathura-configuration-package config)
   (home-zathura-configuration-plugins config)))

;; (define (home-zathura-extensions config new-config)
;;   (home-zathura-configuration
;;    (inherit config)
;;    (append (home-zathura-configuration-config new-config)
;;            (home-zathura-configuration-config config))))

(define home-zathura-service-type
  (service-type (name 'home-zathura)
                (extensions
                 (list (service-extension
                        home-xdg-configuration-files-service-type
                        home-zathura-config-service)
                       (service-extension
                        home-profile-service-type
                        home-zathura-profile-service)))
                ;; (compose concatenate)
                ;; (extend home-zathura-extensions)
                (default-value (home-zathura-configuration))
                (description "Create a Zathura configuration and provide Zathura
for regular use.")))


;;;
;;; Generate documentation.
;;;
(define (generate-home-zathura-documentation)
  (generate-documentation `((home-zathura-configuration ,home-zathura-configuration-fields))
                          'home-zathura-configuration))
