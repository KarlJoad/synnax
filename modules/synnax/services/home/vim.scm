(define-module (synnax services home vim)
  #:use-module (guix gexp)
  #:use-module (guix packages)
  #:use-module (gnu packages vim)
  #:use-module (gnu services)
  #:use-module (gnu services configuration)
  #:use-module (gnu home services)
  #:use-module (guix build-system copy)
  #:use-module (ice-9 match)
  #:export (home-vim-service-type
            home-vim-configuration))

;; A minimal set of Vim configuration options that I think anyone will want to
;; have enabled.
(define %default-vim-config
  '((number . #t)
    (ruler . #t)
    (encoding . "utf8")
    (backspace . "indent,eol,start")))

(define %default-vim-extra-config
  (list
   (plain-file "vim-enable-syntax-highlight"
               "syntax on")))

(define (serialize-alist field-name val)
  #~(string-append
     #$@(map
         (match-lambda
           ;; FIXME: Catch this case!
           ;; ((_) (error))
           ((key . #f) "")
           ((key . #t) (format #f "set ~a~%" key))
           ((key . val) (format #f "set ~a=~a~%" key val)))
         val)))

(define-configuration home-vim-configuration
  (package
   (package neovim)
   "Vim package to use.
This can be @emph{any} editor which accepts a Vim configuration and uses the
@code{-u} flag to set the Vim configuration at start-time.")
  (config
   (alist %default-vim-config)
   "Alist of keys to values to set.")
  (extra-config
   (text-config %default-vim-extra-config)
   "List of file-like objects which will be appended to generated configuration."))

(define (serialize-home-vim-configuration config)
  #~(string-append
   "\"\" Generated by Guix Home. DO NOT EDIT! \"\"\n"
   #$(serialize-configuration config home-vim-configuration-fields)))

(define (create-config-file config config-store-name)
  (mixed-text-file config-store-name (serialize-home-vim-configuration config)))

(define (home-vim-config-service config)
  "Return a list of Vim configuration files, placed in Vim's expected location."
  (list
   `(".vimrc"
     ,(create-config-file config "vimrc-config"))))

(define (home-nvim-config-service config)
  "Return a list of Vim configuration files placed in neovim's expected
location."
  (list
   `("nvim/init.vim"
     ,(create-config-file config "nvim-config"))))

(define (home-vim-profile-service config)
  "Return a list of <package>s to add to the user's profile."
  (list
   (home-vim-configuration-package config)))

(define home-vim-service-type
  (service-type (name 'home-vim)
                (extensions
                 (list (service-extension
                        home-files-service-type
                        home-vim-config-service)
                       (service-extension
                        home-xdg-configuration-files-service-type
                        home-nvim-config-service)
                       (service-extension
                        home-profile-service-type
                        home-vim-profile-service)))
                (default-value (home-vim-configuration))
                (description "Create a minimal Vim configuration and provide a
wrapped Vim command for regular use.
NOTE: This only works for editors which read Vim configuration files!")))


;;;
;;; Generate documentation.
;;;
(define (generate-home-vim-documentation)
  (generate-documentation `((home-vim-configuration ,home-vim-configuration-fields))
                          'home-vim-configuration))
